{"version":3,"sources":["types.ts","state/utils.js","state/phraseState.ts","state/settingsState.ts","hooks/useRomaji.ts","hooks/useTranslation.js","components/HideableText.tsx","components/Breakdown.tsx","components/PhraseRating.tsx","components/PhraseDisplay.tsx","components/PhraseSummary.tsx","components/SettingChanger.tsx","components/SettingsSidebar.tsx","App.tsx","index.tsx"],"names":["UserRating","localStorageEffect","key","setSelf","onSet","savedValue","localStorage","getItem","JSON","parse","newValue","_","isReset","removeItem","setItem","stringify","randomPhrases","require","phrasesAtom","atom","default","map","phrase","i","id","rating","Unrated","effects","phraseIndexAtom","phraseSelector","selectorFamily","get","set","DefaultValue","phrases","HIDE_ENGLISH","HIDE_ROMAJI","settingsAtom","label","value","settingSelector","find","s","settings","romajiDict","Map","translate","engine","process","jpToEnDict","HideableText","isHidden","text","children","Grid","Column","className","textAlign","style","marginTop","backgroundColor","height","minHeight","width","Breakdown","jp","japanese","useQuery","a","has","Promise","resolve","to","from","data","useTranslationQuery","response","responseIsLoading","isLoading","romaji","toRomajiWanaKana","hideEnglish","useRecoilValue","hideRomaji","centered","columns","Row","Loader","size","active","inline","PhraseRating","phraseId","useRecoilState","setPhrase","Rating","maxRating","onRate","e","PhraseDisplay","phraseIdx","setPhraseIdx","console","log","ja","en","Segment","verticalAlign","Button","onClick","prev","length","disabled","Divider","display","gap","justifyContent","alignItems","split","PhraseSummary","isSelected","Header","as","color","Content","Subheader","marginBottom","SettingChanger","settingKey","setting","setSetting","inverted","Checkbox","toggle","checked","borderRadius","SettingsSidebar","isVisible","setIsVisible","Sidebar","Menu","animation","onHide","vertical","visible","direction","Item","App","useState","isSidebarVisible","setIsSidebarVisible","isSettingsVisible","setIsSettingsVisible","selectedPhraseIndex","setSelectedPhraseIndex","paddingBottom","Pushable","icon","opacity","Pusher","flexDirection","dimmed","Container","Icon","name","position","top","left","right","href","queryClient","QueryClient","ReactDOM","render","StrictMode","client","document","getElementById"],"mappings":"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","file":"static/js/main.606ff806.chunk.js","sourcesContent":["export interface Phrase {\r\n  id: number;\r\n  ja: string;\r\n  en: string;\r\n  rating: UserRating;\r\n}\r\n\r\nexport enum UserRating {\r\n  Unrated = 0,\r\n  Bad = 1,\r\n  Ok = 2,\r\n  Good = 3,\r\n}\r\n\r\nexport interface Setting {\r\n  key: string;\r\n  label: string;\r\n  value: string | number | boolean;\r\n}\r\n","export const localStorageEffect =\r\n  (key) =>\r\n  ({ setSelf, onSet }) => {\r\n    const savedValue = localStorage.getItem(key);\r\n    if (savedValue != null) {\r\n      setSelf(JSON.parse(savedValue));\r\n    }\r\n\r\n    onSet((newValue, _, isReset) => {\r\n      isReset\r\n        ? localStorage.removeItem(key)\r\n        : localStorage.setItem(key, JSON.stringify(newValue));\r\n    });\r\n  };\r\n","import { atom, DefaultValue, selectorFamily } from \"recoil\";\r\nimport { Phrase, UserRating } from \"../types\";\r\nimport { localStorageEffect } from \"./utils\";\r\nvar randomPhrases = require(\"../assets/random_phrases.json\");\r\n\r\nconst guardRecoilDefaultValue = (\r\n  candidate: unknown\r\n): candidate is DefaultValue => {\r\n  if (candidate instanceof DefaultValue) return true;\r\n  return false;\r\n};\r\n\r\nexport const phrasesAtom = atom<Phrase[]>({\r\n  key: \"phrases\",\r\n  default:\r\n    randomPhrases?.map((phrase: Phrase, i: number) => ({\r\n      ...phrase,\r\n      id: i,\r\n      rating: UserRating.Unrated,\r\n    })) || [],\r\n  effects: [localStorageEffect(\"phrases\")],\r\n});\r\n\r\nexport const phraseIndexAtom = atom({\r\n  key: \"phraseIndex\",\r\n  default: 0,\r\n});\r\n\r\n// Get a phrase by id\r\nexport const phraseSelector = selectorFamily<Phrase, number>({\r\n  key: \"phraseSelector\",\r\n  get:\r\n    (id: number) =>\r\n    ({ get }) => {\r\n      const phrases = get(phrasesAtom);\r\n      return phrases[id];\r\n    },\r\n  set:\r\n    (id: number) =>\r\n    ({ set, get }, newValue: Phrase | DefaultValue) => {\r\n      if (guardRecoilDefaultValue(newValue)) return;\r\n      const phrases = get(phrasesAtom);\r\n      set(\r\n        phrasesAtom,\r\n        phrases.map((phrase: Phrase) => (phrase.id === id ? newValue : phrase))\r\n      );\r\n    },\r\n});\r\n","import { atom, DefaultValue, selectorFamily } from \"recoil\";\r\nimport { Setting } from \"../types\";\r\nimport { localStorageEffect } from \"./utils\";\r\n\r\nexport const HIDE_ENGLISH = \"hide_english\";\r\nexport const HIDE_ROMAJI = \"hide_romaji\";\r\n\r\nconst guardRecoilDefaultValue = (\r\n  candidate: unknown\r\n): candidate is DefaultValue => {\r\n  if (candidate instanceof DefaultValue) return true;\r\n  return false;\r\n};\r\n\r\nexport const settingsAtom = atom({\r\n  key: \"settings\",\r\n  default: [\r\n    { key: HIDE_ENGLISH, label: \"Hide English\", value: false },\r\n    { key: HIDE_ROMAJI, label: \"Hide Romaji\", value: false },\r\n  ] as Setting[],\r\n  effects: [localStorageEffect(\"settings\")],\r\n});\r\n\r\nexport const settingSelector = selectorFamily<Setting, string>({\r\n  key: \"settingSelector\",\r\n  get:\r\n    (key: string) =>\r\n    ({ get }) => {\r\n      const settings = get(settingsAtom);\r\n      return (\r\n        settings.find((s) => s.key === key) || { key: \"\", value: \"\", label: \"\" }\r\n      );\r\n    },\r\n  set:\r\n    (key: string) =>\r\n    ({ set, get }, newValue) => {\r\n      if (guardRecoilDefaultValue(newValue)) return;\r\n      const settings = get(settingsAtom);\r\n      set(\r\n        settingsAtom,\r\n        settings.map((s) => (s.key === key ? newValue : s))\r\n      );\r\n    },\r\n});\r\n","import { toRomaji as toRomajiWanaKana } from \"wanakana\";\r\n\r\n// Use this to override some of default romaji translations\r\nconst romajiDict = new Map<string, string>();\r\nromajiDict.set(\"は\", \"wa\");\r\nromajiDict.set(\"出身\", \"shusshin\");\r\nromajiDict.set(\"日本\", \"nihon\");\r\n\r\n/**\r\n * @param jp\r\n * @returns romaji\r\n * @description convert a single japanese word to romaji\r\n */\r\nexport const useRomaji = (jp: string) => {\r\n  if (romajiDict.has(jp)) {\r\n    return romajiDict.get(jp);\r\n  } else {\r\n    return toRomajiWanaKana(jp);\r\n  }\r\n};\r\n","import { useQuery } from \"react-query\";\r\nimport translate from \"translate\";\r\n\r\ntranslate.engine = \"deepl\";\r\ntranslate.key = process.env.REACT_APP_DEEPL;\r\n\r\n// Override some translations\r\nconst jpToEnDict = new Map();\r\njpToEnDict.set(\"出身\", \"place where one is born\");\r\njpToEnDict.set(\"は\", \"is\");\r\n\r\nexport function useTranslationQuery(japanese = \"\") {\r\n  return useQuery([\"jp\", japanese], async () => {\r\n    if (jpToEnDict.has(japanese)) {\r\n      return new Promise((resolve) => resolve(jpToEnDict.get(japanese)));\r\n    }\r\n    const data = await translate(japanese, { to: \"en\", from: \"ja\" });\r\n    return data;\r\n  });\r\n}\r\n","import React from \"react\";\r\nimport { Grid } from \"semantic-ui-react\";\r\n\r\ninterface HideableTextProps {\r\n  isHidden: boolean;\r\n  text?: string;\r\n  children?: React.ReactNode;\r\n}\r\nexport const HideableText = ({\r\n  isHidden,\r\n  text,\r\n  children,\r\n}: HideableTextProps) => {\r\n  return isHidden ? (\r\n    <Grid.Column className=\"ui reveal fade\" textAlign={\"center\"}>\r\n      <div className={\"hidden content\"} style={{ marginTop: 1 }}>\r\n        {!!text ? <p>{text}</p> : children}\r\n      </div>\r\n      <div\r\n        className={\"visible content\"}\r\n        style={{\r\n          backgroundColor: \"#616161\",\r\n          height: \"2em\",\r\n          minHeight: \"100%\",\r\n          width: \"100%\",\r\n        }}\r\n      >\r\n        &nbsp;\r\n      </div>\r\n    </Grid.Column>\r\n  ) : (\r\n    <Grid.Column textAlign={\"center\"}>\r\n      {!!text ? <p>{text}</p> : children}\r\n    </Grid.Column>\r\n  );\r\n};\r\n","import React, { FC } from \"react\";\r\nimport { useRecoilValue } from \"recoil\";\r\nimport { Container, Grid, Icon, Loader } from \"semantic-ui-react\";\r\nimport { useRomaji } from \"../hooks/useRomaji\";\r\nimport { useTranslationQuery } from \"../hooks/useTranslation\";\r\nimport {\r\n  HIDE_ENGLISH,\r\n  HIDE_ROMAJI,\r\n  settingSelector,\r\n} from \"../state/settingsState\";\r\nimport { HideableText } from \"./HideableText\";\r\ninterface BreakdownProps {\r\n  japanese: string;\r\n}\r\nexport const Breakdown: FC<BreakdownProps> = ({ japanese }) => {\r\n  const { data: response, isLoading: responseIsLoading } =\r\n    useTranslationQuery(japanese);\r\n  const romaji = useRomaji(japanese);\r\n  const hideEnglish = useRecoilValue(settingSelector(HIDE_ENGLISH));\r\n  const hideRomaji = useRecoilValue(settingSelector(HIDE_ROMAJI));\r\n  return (\r\n    <div>\r\n      <Grid centered columns={1}>\r\n        <Grid.Row textAlign={\"center\"}>\r\n          <HideableText isHidden={!!hideRomaji.value}>{romaji}</HideableText>\r\n        </Grid.Row>\r\n        <Grid.Row>\r\n          <p className={\"breakdown-jp\"}>{japanese}</p>\r\n        </Grid.Row>\r\n        <Grid.Row>\r\n          {response && (\r\n            <HideableText isHidden={!!hideEnglish.value}>\r\n              {response}\r\n            </HideableText>\r\n          )}\r\n          {responseIsLoading && <Loader size=\"mini\" active inline />}\r\n        </Grid.Row>\r\n      </Grid>\r\n    </div>\r\n  );\r\n};\r\n","import React, { FC } from \"react\";\r\nimport { useRecoilState, useRecoilValue } from \"recoil\";\r\nimport { Rating } from \"semantic-ui-react\";\r\nimport { phraseSelector } from \"../state/phraseState\";\r\nimport { UserRating } from \"../types\";\r\n\r\ninterface PhraseRatingProps {\r\n  phraseId: number;\r\n}\r\nexport const PhraseRating = ({ phraseId }: PhraseRatingProps) => {\r\n  const [phrase, setPhrase] = useRecoilState(phraseSelector(phraseId));\r\n  return (\r\n    <Rating\r\n      rating={phrase.rating}\r\n      maxRating={3}\r\n      onRate={(e, data) =>\r\n        setPhrase({ ...phrase, rating: data.rating as UserRating })\r\n      }\r\n      size={\"massive\"}\r\n    />\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { useRecoilState, useRecoilValue } from \"recoil\";\r\nimport { Segment, Grid, Button, Divider } from \"semantic-ui-react\";\r\nimport { phraseIndexAtom, phrasesAtom } from \"../state/phraseState\";\r\nimport { HIDE_ENGLISH, settingSelector } from \"../state/settingsState\";\r\nimport { Breakdown } from \"./Breakdown\";\r\nimport { HideableText } from \"./HideableText\";\r\nimport { PhraseRating } from \"./PhraseRating\";\r\n\r\nexport const PhraseDisplay = () => {\r\n  const [phraseIdx, setPhraseIdx] = useRecoilState(phraseIndexAtom);\r\n  const hideEnglish = useRecoilValue(settingSelector(HIDE_ENGLISH));\r\n  console.log(\"hideEnglish\", hideEnglish);\r\n  const randomPhrases = useRecoilValue(phrasesAtom);\r\n  const jp = randomPhrases[phraseIdx]?.ja || \"\";\r\n  const en = randomPhrases[phraseIdx]?.en || \"\";\r\n  return (\r\n    <Segment>\r\n      <Grid columns={1} centered>\r\n        <Grid.Row>\r\n          <Grid columns={3} centered verticalAlign={\"middle\"}>\r\n            <Grid.Column textAlign={\"right\"}>\r\n              <Button\r\n                onClick={() =>\r\n                  setPhraseIdx((prev) => (prev - 1) % randomPhrases.length)\r\n                }\r\n                disabled={phraseIdx === 0}\r\n              >\r\n                Previous\r\n              </Button>\r\n            </Grid.Column>\r\n            <HideableText text={en} isHidden={!!hideEnglish.value} />\r\n            <Grid.Column textAlign={\"left\"}>\r\n              <Button\r\n                onClick={() =>\r\n                  setPhraseIdx((prev) => (prev + 1) % randomPhrases.length)\r\n                }\r\n                disabled={phraseIdx === randomPhrases.length - 1}\r\n              >\r\n                Next\r\n              </Button>\r\n            </Grid.Column>\r\n          </Grid>\r\n        </Grid.Row>\r\n        <Grid.Row>\r\n          <p className={\"breakdown-jp\"}>{jp}</p>\r\n        </Grid.Row>\r\n        {/* Breakdown */}\r\n        <Divider />\r\n        <Grid.Row>\r\n          <Grid.Column textAlign={\"center\"}>\r\n            <Grid centered>\r\n              <Grid.Row>\r\n                <div\r\n                  style={{\r\n                    display: \"flex\",\r\n                    gap: \"25px\",\r\n                    justifyContent: \"center\",\r\n                    alignItems: \"top\",\r\n                  }}\r\n                >\r\n                  {jp.split(/\\s*[\\s,。]\\s*/).map((s: string, i: number) => (\r\n                    <Breakdown key={`${s}-${i}`} japanese={s} />\r\n                  ))}\r\n                </div>\r\n              </Grid.Row>\r\n            </Grid>\r\n          </Grid.Column>\r\n        </Grid.Row>\r\n\r\n        <Divider />\r\n        {/* Rating */}\r\n        <Grid.Row>\r\n          <PhraseRating phraseId={phraseIdx} />\r\n        </Grid.Row>\r\n      </Grid>\r\n    </Segment>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { useRecoilValue } from \"recoil\";\r\nimport { Container, Header, Rating, Segment } from \"semantic-ui-react\";\r\nimport { phraseSelector } from \"../state/phraseState\";\r\nimport { HIDE_ENGLISH, settingSelector } from \"../state/settingsState\";\r\n\r\ninterface PhraseSummaryProps {\r\n  phraseId: number;\r\n  isSelected: boolean;\r\n}\r\nexport const PhraseSummary = ({\r\n  phraseId,\r\n  isSelected = false,\r\n}: PhraseSummaryProps) => {\r\n  const phrase = useRecoilValue(phraseSelector(phraseId));\r\n  const hideEnglish = useRecoilValue(settingSelector(HIDE_ENGLISH));\r\n  return (\r\n    <Header\r\n      as=\"h4\"\r\n      style={{\r\n        color: isSelected ? \"white\" : \"grey\",\r\n      }}\r\n    >\r\n      <Header.Content>\r\n        {phrase.ja}\r\n        {!hideEnglish && (\r\n          <Header.Subheader\r\n            style={{\r\n              color: isSelected ? \"white\" : \"grey\",\r\n              marginBottom: 10,\r\n            }}\r\n          >\r\n            {phrase.en}\r\n          </Header.Subheader>\r\n        )}\r\n        <Rating disabled rating={phrase.rating} maxRating={3} size={\"tiny\"} />\r\n      </Header.Content>\r\n    </Header>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { useRecoilState } from \"recoil\";\r\nimport {\r\n  Checkbox,\r\n  Container,\r\n  Form,\r\n  Grid,\r\n  Header,\r\n  Input,\r\n  Label,\r\n  Segment,\r\n} from \"semantic-ui-react\";\r\nimport { settingSelector } from \"../state/settingsState\";\r\n\r\ninterface SettingChangerProps {\r\n  settingKey: string;\r\n}\r\nexport const SettingChanger = ({ settingKey }: SettingChangerProps) => {\r\n  const [setting, setSetting] = useRecoilState(settingSelector(settingKey));\r\n  if (!setting) return <>Bad Setting Key</>;\r\n\r\n  switch (typeof setting.value) {\r\n    case \"boolean\":\r\n      return (\r\n        <Segment inverted>\r\n          <Grid columns={2} verticalAlign={\"middle\"}>\r\n            <Grid.Row>\r\n              <Grid.Column>\r\n                <p>{setting.label}</p>\r\n              </Grid.Column>\r\n              <Grid.Column>\r\n                <Checkbox\r\n                  toggle\r\n                  checked={setting.value}\r\n                  inline\r\n                  onClick={() =>\r\n                    setSetting({ ...setting, value: !setting.value })\r\n                  }\r\n                  style={{ backgroundColor: \"grey\", borderRadius: 10 }}\r\n                />\r\n              </Grid.Column>\r\n            </Grid.Row>\r\n          </Grid>\r\n        </Segment>\r\n      );\r\n    default:\r\n      return <>Bad Setting Type</>;\r\n  }\r\n};\r\n","import React from \"react\";\r\nimport {\r\n  Modal,\r\n  Button,\r\n  Header,\r\n  Sidebar,\r\n  Segment,\r\n  Form,\r\n  Checkbox,\r\n  Menu,\r\n} from \"semantic-ui-react\";\r\nimport { HIDE_ENGLISH, HIDE_ROMAJI } from \"../state/settingsState\";\r\nimport { SettingChanger } from \"./SettingChanger\";\r\n\r\ninterface SettingsSidebarProps {\r\n  isVisible: boolean;\r\n  setIsVisible: (isVisible: boolean) => void;\r\n}\r\nexport const SettingsSidebar = ({\r\n  isVisible,\r\n  setIsVisible,\r\n}: SettingsSidebarProps) => {\r\n  return (\r\n    <Sidebar\r\n      as={Menu}\r\n      animation=\"overlay\"\r\n      inverted\r\n      onHide={() => setIsVisible(false)}\r\n      vertical\r\n      visible={isVisible}\r\n      direction={\"right\"}\r\n    >\r\n      <Menu.Item>\r\n        <SettingChanger settingKey={HIDE_ENGLISH} />\r\n      </Menu.Item>\r\n      <Menu.Item>\r\n        <SettingChanger settingKey={HIDE_ROMAJI} />\r\n      </Menu.Item>\r\n    </Sidebar>\r\n  );\r\n};\r\n","import React, { useState } from \"react\";\r\nimport { useRecoilState, useRecoilValue, useSetRecoilState } from \"recoil\";\r\nimport \"semantic-ui-css/semantic.min.css\";\r\nimport {\r\n  Container,\r\n  Grid,\r\n  Header,\r\n  Icon,\r\n  Menu,\r\n  Segment,\r\n  Sidebar,\r\n  Image,\r\n  Button,\r\n} from \"semantic-ui-react\";\r\nimport { PhraseDisplay } from \"./components/PhraseDisplay\";\r\nimport { PhraseSummary } from \"./components/PhraseSummary\";\r\nimport { SettingsSidebar } from \"./components/SettingsSidebar\";\r\nimport { phraseIndexAtom, phrasesAtom } from \"./state/phraseState\";\r\n\r\nfunction App() {\r\n  const [isSidebarVisible, setIsSidebarVisible] = useState(false);\r\n  const [isSettingsVisible, setIsSettingsVisible] = useState(false);\r\n  const phrases = useRecoilValue(phrasesAtom);\r\n  const [selectedPhraseIndex, setSelectedPhraseIndex] =\r\n    useRecoilState(phraseIndexAtom);\r\n  return (\r\n    <Grid columns={1}>\r\n      <Grid.Column style={{ paddingBottom: 0 }}>\r\n        <Sidebar.Pushable>\r\n          <Sidebar\r\n            as={Menu}\r\n            animation=\"overlay\"\r\n            icon=\"labeled\"\r\n            inverted\r\n            onHide={() => setIsSidebarVisible(false)}\r\n            vertical\r\n            visible={isSidebarVisible}\r\n            width=\"thin\"\r\n          >\r\n            {phrases.map((phrase, i) => (\r\n              <Menu.Item\r\n                key={i}\r\n                as=\"a\"\r\n                onClick={() => {\r\n                  setSelectedPhraseIndex(i);\r\n                }}\r\n                style={{\r\n                  opacity: phrase.rating >= 3 ? 0.5 : 1,\r\n                }}\r\n              >\r\n                <PhraseSummary\r\n                  phraseId={i}\r\n                  isSelected={selectedPhraseIndex === i}\r\n                />\r\n              </Menu.Item>\r\n            ))}\r\n          </Sidebar>\r\n          <SettingsSidebar\r\n            isVisible={isSettingsVisible}\r\n            setIsVisible={setIsSettingsVisible}\r\n          />\r\n          <Sidebar.Pusher\r\n            style={{\r\n              display: \"flex\",\r\n              flexDirection: \"column\",\r\n              justifyContent: \"space-between\",\r\n              minHeight: \"100vh\",\r\n            }}\r\n            dimmed={isSidebarVisible || isSettingsVisible}\r\n          >\r\n            <Container>\r\n              <Button\r\n                icon={<Icon name=\"sidebar\" />}\r\n                onClick={() => setIsSidebarVisible(true)}\r\n                style={{\r\n                  position: \"absolute\",\r\n                  top: 20,\r\n                  left: 20,\r\n                }}\r\n              />\r\n              <Button\r\n                icon={<Icon name=\"settings\" />}\r\n                onClick={() => setIsSettingsVisible(true)}\r\n                style={{\r\n                  position: \"absolute\",\r\n                  top: 20,\r\n                  right: 20,\r\n                }}\r\n              />\r\n              <Header textAlign={\"center\"} size={\"huge\"}>\r\n                imi\r\n              </Header>\r\n              <PhraseDisplay />\r\n            </Container>\r\n            <Segment\r\n              inverted\r\n              style={{ width: \"100%\", marginBottom: 0, borderRadius: 0 }}\r\n            >\r\n              <div>\r\n                <h5 style={{ textAlign: \"center\" }}>\r\n                  This site uses an API provided by{\" \"}\r\n                  <a href={\"https://www.deepl.com/\"}>https://www.deepl.com/</a>\r\n                </h5>\r\n                <h5 style={{ textAlign: \"center\" }}>\r\n                  Have a suggestion? Open an issue on my&nbsp;\r\n                  <a href={\"https://github.com/connordear/imi\"}>\r\n                    GitHub project.\r\n                  </a>\r\n                </h5>\r\n              </div>\r\n            </Segment>\r\n          </Sidebar.Pusher>\r\n        </Sidebar.Pushable>\r\n      </Grid.Column>\r\n    </Grid>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport { QueryClient, QueryClientProvider } from \"react-query\";\r\nimport { RecoilRoot } from \"recoil\";\r\nconst queryClient = new QueryClient();\r\n\r\nReactDOM.render(\r\n  <RecoilRoot>\r\n    <React.StrictMode>\r\n      <QueryClientProvider client={queryClient}>\r\n        <App />\r\n      </QueryClientProvider>\r\n    </React.StrictMode>\r\n  </RecoilRoot>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}