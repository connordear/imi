{"version":3,"sources":["types.ts","state/stateUtil.ts","state/utils.js","state/phraseState.ts","state/settingsState.ts","hooks/useRomaji.ts","hooks/useTranslation.js","components/HideableText.tsx","components/Breakdown.tsx","components/PhraseRating.tsx","components/PhraseDisplay.tsx","components/PhraseSummary.tsx","components/SettingChanger.tsx","components/SettingsSidebar.tsx","App.tsx","index.tsx"],"names":["UserRating","guardRecoilDefaultValue","candidate","DefaultValue","localStorageEffect","key","setSelf","onSet","savedValue","localStorage","getItem","JSON","parse","newValue","_","isReset","removeItem","setItem","stringify","randomPhrases","require","phrasesAtom","atom","default","map","phrase","i","id","rating","Unrated","effects","phraseIndexAtom","phraseSelector","selectorFamily","get","set","phrases","HIDE_ENGLISH","HIDE_ROMAJI","SKIP_IF_GOOD","settingsAtom","label","value","settingSelector","find","s","settings","romajiDict","Map","translate","engine","process","jpToEnDict","HideableText","isHidden","text","children","useState","isSpacePressed","setIsSpacePressed","useHotkeys","keydown","keyup","Grid","Column","className","textAlign","style","marginTop","paddingLeft","paddingRight","backgroundColor","height","minHeight","width","marginLeft","Breakdown","jp","japanese","useQuery","a","has","Promise","resolve","to","from","data","useTranslationQuery","response","responseIsLoading","isLoading","romaji","toRomajiWanaKana","hideEnglish","useRecoilValue","hideRomaji","centered","columns","Row","Loader","size","active","inline","PhraseRating","phraseId","useRecoilState","setPhrase","Rating","maxRating","onRate","e","getNextIndex","currentIndex","skipIf3Stars","isForward","modifier","every","Good","length","nextIndex","PhraseDisplay","phraseIdx","setPhraseIdx","skipIfGood","ja","en","nextPhrase","prevPhrase","Bad","Ok","Segment","only","stackable","verticalAlign","Button","onClick","icon","labelPosition","Icon","name","Divider","display","gap","justifyContent","alignItems","split","PhraseSummary","isSelected","Header","as","color","Content","Subheader","marginBottom","disabled","SettingChanger","settingKey","setting","setSetting","inverted","Checkbox","toggle","checked","borderRadius","SettingsSidebar","isVisible","setIsVisible","setPhrases","useSetRecoilState","Sidebar","Menu","animation","onHide","vertical","visible","direction","Item","Container","p","App","isSidebarVisible","setIsSidebarVisible","isSettingsVisible","setIsSettingsVisible","selectedPhraseIndex","setSelectedPhraseIndex","paddingBottom","Pushable","opacity","Pusher","flexDirection","dimmed","fontSize","href","queryClient","QueryClient","ReactDOM","render","StrictMode","client","document","getElementById"],"mappings":"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","file":"static/js/main.c4e4ed1b.chunk.js","sourcesContent":["export interface Phrase {\r\n  id: number;\r\n  ja: string;\r\n  en: string;\r\n  rating: UserRating;\r\n}\r\n\r\nexport enum UserRating {\r\n  Unrated = 0,\r\n  Bad = 1,\r\n  Ok = 2,\r\n  Good = 3,\r\n}\r\n\r\nexport interface Setting {\r\n  key: string;\r\n  label: string;\r\n  value: string | number | boolean;\r\n}\r\n","import { DefaultValue } from \"recoil\";\r\n\r\nexport const guardRecoilDefaultValue = (\r\n  candidate: unknown\r\n): candidate is DefaultValue => {\r\n  if (candidate instanceof DefaultValue) return true;\r\n  return false;\r\n};\r\n","export const localStorageEffect =\r\n  (key) =>\r\n  ({ setSelf, onSet }) => {\r\n    const savedValue = localStorage.getItem(key);\r\n    if (savedValue != null) {\r\n      setSelf(JSON.parse(savedValue));\r\n    }\r\n\r\n    onSet((newValue, _, isReset) => {\r\n      isReset\r\n        ? localStorage.removeItem(key)\r\n        : localStorage.setItem(key, JSON.stringify(newValue));\r\n    });\r\n  };\r\n","import { atom, DefaultValue, selectorFamily } from \"recoil\";\r\nimport { Phrase, UserRating } from \"../types\";\r\nimport { guardRecoilDefaultValue } from \"./stateUtil\";\r\nimport { localStorageEffect } from \"./utils\";\r\nvar randomPhrases = require(\"../assets/random_phrases.json\");\r\n\r\nexport const phrasesAtom = atom<Phrase[]>({\r\n  key: \"phrases\",\r\n  default:\r\n    randomPhrases?.map((phrase: Phrase, i: number) => ({\r\n      ...phrase,\r\n      id: i,\r\n      rating: UserRating.Unrated,\r\n    })) || [],\r\n  effects: [localStorageEffect(\"phrases\")],\r\n});\r\n\r\nexport const phraseIndexAtom = atom({\r\n  key: \"phraseIndex\",\r\n  default: 0,\r\n  effects: [localStorageEffect(\"phraseIndex\")],\r\n});\r\n\r\n// Get a phrase by id\r\nexport const phraseSelector = selectorFamily<Phrase, number>({\r\n  key: \"phraseSelector\",\r\n  get:\r\n    (id: number) =>\r\n    ({ get }) => {\r\n      const phrases = get(phrasesAtom);\r\n      return phrases[id];\r\n    },\r\n  set:\r\n    (id: number) =>\r\n    ({ set, get }, newValue: Phrase | DefaultValue) => {\r\n      if (guardRecoilDefaultValue(newValue)) return;\r\n      const phrases = get(phrasesAtom);\r\n      set(\r\n        phrasesAtom,\r\n        phrases.map((phrase: Phrase) => (phrase.id === id ? newValue : phrase))\r\n      );\r\n    },\r\n});\r\n","import { atom, selectorFamily } from \"recoil\";\r\nimport { Setting } from \"../types\";\r\nimport { guardRecoilDefaultValue } from \"./stateUtil\";\r\nimport { localStorageEffect } from \"./utils\";\r\n\r\nexport const HIDE_ENGLISH = \"hide_english\";\r\nexport const HIDE_ROMAJI = \"hide_romaji\";\r\nexport const SKIP_IF_GOOD = \"skip_if_good\";\r\n\r\nexport const settingsAtom = atom({\r\n  key: \"settings\",\r\n  default: [\r\n    { key: HIDE_ENGLISH, label: \"Hide English\", value: false },\r\n    { key: HIDE_ROMAJI, label: \"Hide Romaji\", value: false },\r\n    { key: SKIP_IF_GOOD, label: \"Skip 3 Starred Cards\", value: false },\r\n  ] as Setting[],\r\n  effects: [localStorageEffect(\"settings\")],\r\n});\r\n\r\nexport const settingSelector = selectorFamily<Setting, string>({\r\n  key: \"settingSelector\",\r\n  get:\r\n    (key: string) =>\r\n    ({ get }) => {\r\n      const settings = get(settingsAtom);\r\n      return (\r\n        settings.find((s) => s.key === key) || { key: \"\", value: \"\", label: \"\" }\r\n      );\r\n    },\r\n  set:\r\n    (key: string) =>\r\n    ({ set, get }, newValue) => {\r\n      if (guardRecoilDefaultValue(newValue)) return;\r\n      const settings = get(settingsAtom);\r\n      set(\r\n        settingsAtom,\r\n        settings.map((s) => (s.key === key ? newValue : s))\r\n      );\r\n    },\r\n});\r\n","import { toRomaji as toRomajiWanaKana } from \"wanakana\";\r\n\r\n// Use this to override some of default romaji translations\r\nconst romajiDict = new Map<string, string>();\r\nromajiDict.set(\"は\", \"wa\");\r\nromajiDict.set(\"には\", \"niwa\");\r\nromajiDict.set(\"出身\", \"shusshin\");\r\nromajiDict.set(\"日本\", \"nihon\");\r\n\r\n/**\r\n * @param jp\r\n * @returns romaji\r\n * @description convert a single japanese word to romaji\r\n */\r\nexport const useRomaji = (jp: string) => {\r\n  if (romajiDict.has(jp)) {\r\n    return romajiDict.get(jp);\r\n  } else {\r\n    return toRomajiWanaKana(jp);\r\n  }\r\n};\r\n","import { useQuery } from \"react-query\";\r\nimport translate from \"translate\";\r\n\r\ntranslate.engine = \"deepl\";\r\ntranslate.key = process.env.REACT_APP_DEEPL;\r\n\r\n// Override some translations\r\nconst jpToEnDict = new Map();\r\njpToEnDict.set(\"出身\", \"place where one is born\");\r\njpToEnDict.set(\"は\", \"is\");\r\njpToEnDict.set(\"あります\", \"has\");\r\njpToEnDict.set(\"ありますか\", \"you have?\");\r\njpToEnDict.set(\"に\", \"(position article)\");\r\njpToEnDict.set(\"にほん\", \"Japan\");\r\njpToEnDict.set(\"すんでいますか\", \"you live?\");\r\njpToEnDict.set(\"いきたいですか\", \"do you want to go?\");\r\njpToEnDict.set(\"いったことが\", \"been to\");\r\njpToEnDict.set(\"ごねん\", \"5 years\");\r\njpToEnDict.set(\"いきましたか\", \"did you go?\");\r\njpToEnDict.set(\"いきました\", \"went\");\r\njpToEnDict.set(\"いきますか\", \"are you going?\");\r\njpToEnDict.set(\"を\", \"indicates object\");\r\njpToEnDict.set(\"の\", \"possessive particle\");\r\nexport function useTranslationQuery(japanese = \"\") {\r\n  return useQuery([\"jp\", japanese], async () => {\r\n    if (jpToEnDict.has(japanese)) {\r\n      return new Promise((resolve) => resolve(jpToEnDict.get(japanese)));\r\n    }\r\n    const data = await translate(japanese, { to: \"en\", from: \"ja\" });\r\n    return data;\r\n  });\r\n}\r\n","import React, { useState } from \"react\";\r\nimport { useHotkeys } from \"react-hotkeys-hook\";\r\nimport { Grid } from \"semantic-ui-react\";\r\n\r\ninterface HideableTextProps {\r\n  isHidden: boolean;\r\n  text?: string;\r\n  children?: React.ReactNode;\r\n}\r\nexport const HideableText = ({\r\n  isHidden,\r\n  text,\r\n  children,\r\n}: HideableTextProps) => {\r\n  const [isSpacePressed, setIsSpacePressed] = useState(false);\r\n  useHotkeys(\"space\", () => setIsSpacePressed(true), {\r\n    keydown: true,\r\n    keyup: false,\r\n  });\r\n  useHotkeys(\"space\", () => setIsSpacePressed(false), {\r\n    keydown: false,\r\n    keyup: true,\r\n  });\r\n\r\n  return isHidden && !isSpacePressed ? (\r\n    <Grid.Column className=\"ui reveal fade\" textAlign={\"center\"}>\r\n      <div\r\n        className={\"hidden content\"}\r\n        style={{\r\n          marginTop: 1,\r\n          paddingLeft: 5,\r\n          paddingRight: 5,\r\n        }}\r\n      >\r\n        {!!text ? <p>{text}</p> : children}\r\n      </div>\r\n      <div\r\n        className={\"visible content\"}\r\n        style={{\r\n          backgroundColor: \"#d6d4d0\",\r\n          height: \"2em\",\r\n          minHeight: \"100%\",\r\n          width: \"85%\",\r\n          marginLeft: \"7.5%\",\r\n        }}\r\n      >\r\n        &nbsp;\r\n      </div>\r\n    </Grid.Column>\r\n  ) : (\r\n    <Grid.Column textAlign={\"center\"}>\r\n      {!!text ? <p>{text}</p> : children}\r\n    </Grid.Column>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { useRecoilValue } from \"recoil\";\r\nimport { Grid, Loader } from \"semantic-ui-react\";\r\nimport { useRomaji } from \"../hooks/useRomaji\";\r\nimport { useTranslationQuery } from \"../hooks/useTranslation\";\r\nimport {\r\n  HIDE_ENGLISH,\r\n  HIDE_ROMAJI,\r\n  settingSelector,\r\n} from \"../state/settingsState\";\r\nimport { HideableText } from \"./HideableText\";\r\ninterface BreakdownProps {\r\n  japanese: string;\r\n}\r\nexport const Breakdown = ({ japanese }: BreakdownProps) => {\r\n  const { data: response, isLoading: responseIsLoading } =\r\n    useTranslationQuery(japanese);\r\n  const romaji = useRomaji(japanese);\r\n  const hideEnglish = useRecoilValue(settingSelector(HIDE_ENGLISH));\r\n  const hideRomaji = useRecoilValue(settingSelector(HIDE_ROMAJI));\r\n  return (\r\n    <div>\r\n      <Grid centered columns={1}>\r\n        <Grid.Row textAlign={\"center\"}>\r\n          <HideableText isHidden={!!hideRomaji.value}>{romaji}</HideableText>\r\n        </Grid.Row>\r\n        <Grid.Row>\r\n          <p className={\"breakdown-jp\"}>{japanese}</p>\r\n        </Grid.Row>\r\n        <Grid.Row>\r\n          {response && (\r\n            <HideableText isHidden={!!hideEnglish.value}>\r\n              {response}\r\n            </HideableText>\r\n          )}\r\n          {responseIsLoading && <Loader size=\"mini\" active inline />}\r\n        </Grid.Row>\r\n      </Grid>\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { useRecoilState } from \"recoil\";\r\nimport { Rating } from \"semantic-ui-react\";\r\nimport { phraseSelector } from \"../state/phraseState\";\r\nimport { UserRating } from \"../types\";\r\n\r\ninterface PhraseRatingProps {\r\n  phraseId: number;\r\n}\r\n\r\nexport const PhraseRating = ({ phraseId }: PhraseRatingProps) => {\r\n  const [phrase, setPhrase] = useRecoilState(phraseSelector(phraseId));\r\n  return (\r\n    <Rating\r\n      rating={phrase.rating}\r\n      maxRating={3}\r\n      onRate={(e, data) =>\r\n        setPhrase({ ...phrase, rating: data.rating as UserRating })\r\n      }\r\n      size={\"massive\"}\r\n    />\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { useHotkeys } from \"react-hotkeys-hook\";\r\nimport { useRecoilState, useRecoilValue } from \"recoil\";\r\nimport { Segment, Grid, Button, Divider, Icon } from \"semantic-ui-react\";\r\nimport {\r\n  phraseIndexAtom,\r\n  phrasesAtom,\r\n  phraseSelector,\r\n} from \"../state/phraseState\";\r\nimport {\r\n  HIDE_ENGLISH,\r\n  settingSelector,\r\n  SKIP_IF_GOOD,\r\n} from \"../state/settingsState\";\r\nimport { Phrase, UserRating } from \"../types\";\r\nimport { Breakdown } from \"./Breakdown\";\r\nimport { HideableText } from \"./HideableText\";\r\nimport { PhraseRating } from \"./PhraseRating\";\r\n\r\nexport const getNextIndex = (\r\n  phrases: Phrase[],\r\n  currentIndex: number,\r\n  skipIf3Stars: boolean,\r\n  isForward: boolean\r\n) => {\r\n  const modifier = isForward ? 1 : -1;\r\n\r\n  // If we are don't care about skipping 3 stars, or ALL phrases are 3 stars, just return the next index\r\n  if (\r\n    !skipIf3Stars ||\r\n    phrases.every((phrase) => phrase.rating === UserRating.Good)\r\n  ) {\r\n    // we add the length in the case that we are at the start of the list and going backwards\r\n    return (currentIndex + modifier + phrases.length) % phrases.length;\r\n  }\r\n\r\n  // skip 3 stars (we know there is at least one phrase here not 3 stars)\r\n  let nextIndex = (currentIndex + modifier + phrases.length) % phrases.length;\r\n  while (phrases[nextIndex].rating === UserRating.Good) {\r\n    nextIndex = (nextIndex + modifier + phrases.length) % phrases.length;\r\n  }\r\n  return nextIndex;\r\n};\r\n\r\nexport const PhraseDisplay = () => {\r\n  const [phraseIdx, setPhraseIdx] = useRecoilState(phraseIndexAtom);\r\n  const [phrase, setPhrase] = useRecoilState(phraseSelector(phraseIdx));\r\n\r\n  const hideEnglish = useRecoilValue(settingSelector(HIDE_ENGLISH));\r\n  const skipIfGood = useRecoilValue(settingSelector(SKIP_IF_GOOD));\r\n\r\n  const phrases = useRecoilValue(phrasesAtom);\r\n  const jp = phrases[phraseIdx]?.ja || \"\";\r\n  const en = phrases[phraseIdx]?.en || \"\";\r\n\r\n  const nextPhrase = () => {\r\n    setPhraseIdx(getNextIndex(phrases, phraseIdx, !!skipIfGood.value, true));\r\n  };\r\n\r\n  const prevPhrase = () => {\r\n    setPhraseIdx(getNextIndex(phrases, phraseIdx, !!skipIfGood.value, false));\r\n  };\r\n\r\n  useHotkeys(\"left\", prevPhrase, [phraseIdx, phrases, skipIfGood]);\r\n  useHotkeys(\"right\", nextPhrase, [phraseIdx, phrases, skipIfGood]);\r\n  useHotkeys(\r\n    \"0\",\r\n    () => {\r\n      setPhrase((phrase) => ({ ...phrase, rating: UserRating.Unrated }));\r\n    },\r\n    [phrase]\r\n  );\r\n  useHotkeys(\r\n    \"1\",\r\n    () => {\r\n      setPhrase((phrase) => ({ ...phrase, rating: UserRating.Bad }));\r\n    },\r\n    [phrase]\r\n  );\r\n  useHotkeys(\r\n    \"2\",\r\n    () => {\r\n      setPhrase((phrase) => ({ ...phrase, rating: UserRating.Ok }));\r\n    },\r\n    [phrase]\r\n  );\r\n  useHotkeys(\r\n    \"3\",\r\n    () => {\r\n      setPhrase((phrase) => ({ ...phrase, rating: UserRating.Good }));\r\n    },\r\n    [phrase]\r\n  );\r\n\r\n  return (\r\n    <Segment>\r\n      <Grid columns={1} centered>\r\n        <Grid.Row only=\"computer tablet\">\r\n          <Grid columns={3} stackable centered verticalAlign={\"middle\"}>\r\n            <Grid.Column textAlign={\"right\"}>\r\n              <Button onClick={prevPhrase} icon labelPosition=\"left\">\r\n                <Icon name={\"arrow left\"} />\r\n                Previous\r\n              </Button>\r\n            </Grid.Column>\r\n            <HideableText text={en} isHidden={!!hideEnglish.value} />\r\n            <Grid.Column textAlign={\"left\"}>\r\n              <Button onClick={nextPhrase} icon labelPosition=\"right\">\r\n                Next\r\n                <Icon name={\"arrow right\"} />\r\n              </Button>\r\n            </Grid.Column>\r\n          </Grid>\r\n        </Grid.Row>\r\n\r\n        <Grid.Row only=\"mobile\" columns={2} centered>\r\n          <Grid.Column textAlign=\"right\">\r\n            <Button onClick={prevPhrase} icon labelPosition=\"left\">\r\n              <Icon name={\"arrow left\"} />\r\n              Previous\r\n            </Button>\r\n          </Grid.Column>\r\n          <Grid.Column textAlign=\"left\">\r\n            <Button onClick={nextPhrase} icon labelPosition=\"right\">\r\n              Next\r\n              <Icon name={\"arrow right\"} />\r\n            </Button>\r\n          </Grid.Column>\r\n        </Grid.Row>\r\n        <Grid.Row only=\"mobile\">\r\n          <HideableText text={en} isHidden={!!hideEnglish.value} />\r\n        </Grid.Row>\r\n        <Grid.Row>\r\n          <p className={\"breakdown-jp\"}>{jp}</p>\r\n        </Grid.Row>\r\n        {/* Breakdown */}\r\n        <Divider />\r\n        <Grid.Row>\r\n          <Grid.Column textAlign={\"center\"}>\r\n            <Grid centered>\r\n              <Grid.Row>\r\n                <div\r\n                  style={{\r\n                    display: \"flex\",\r\n                    gap: \"25px\",\r\n                    justifyContent: \"center\",\r\n                    alignItems: \"top\",\r\n                  }}\r\n                >\r\n                  {jp.split(/\\s*[\\s,。]\\s*/).map((s: string, i: number) => (\r\n                    <Breakdown key={`${s}-${i}`} japanese={s} />\r\n                  ))}\r\n                </div>\r\n              </Grid.Row>\r\n            </Grid>\r\n          </Grid.Column>\r\n        </Grid.Row>\r\n\r\n        <Divider />\r\n        {/* Rating */}\r\n        <Grid.Row>\r\n          <PhraseRating phraseId={phraseIdx} />\r\n        </Grid.Row>\r\n      </Grid>\r\n    </Segment>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { useRecoilValue } from \"recoil\";\r\nimport { Header, Rating } from \"semantic-ui-react\";\r\nimport { phraseSelector } from \"../state/phraseState\";\r\nimport { HIDE_ENGLISH, settingSelector } from \"../state/settingsState\";\r\n\r\ninterface PhraseSummaryProps {\r\n  phraseId: number;\r\n  isSelected: boolean;\r\n}\r\nexport const PhraseSummary = ({\r\n  phraseId,\r\n  isSelected = false,\r\n}: PhraseSummaryProps) => {\r\n  const phrase = useRecoilValue(phraseSelector(phraseId));\r\n  const hideEnglish = useRecoilValue(settingSelector(HIDE_ENGLISH));\r\n  return (\r\n    <Header\r\n      as=\"h4\"\r\n      style={{\r\n        color: isSelected ? \"white\" : \"grey\",\r\n      }}\r\n    >\r\n      <Header.Content>\r\n        {phrase.ja}\r\n        {!hideEnglish.value && (\r\n          <Header.Subheader\r\n            style={{\r\n              color: isSelected ? \"white\" : \"grey\",\r\n              marginBottom: 10,\r\n            }}\r\n          >\r\n            {phrase.en}\r\n          </Header.Subheader>\r\n        )}\r\n      </Header.Content>\r\n      <Header.Subheader>\r\n        <Rating disabled rating={phrase.rating} maxRating={3} size={\"tiny\"} />\r\n      </Header.Subheader>\r\n    </Header>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { useRecoilState } from \"recoil\";\r\nimport { Checkbox, Grid, Segment } from \"semantic-ui-react\";\r\nimport { settingSelector } from \"../state/settingsState\";\r\n\r\ninterface SettingChangerProps {\r\n  settingKey: string;\r\n}\r\nexport const SettingChanger = ({ settingKey }: SettingChangerProps) => {\r\n  const [setting, setSetting] = useRecoilState(settingSelector(settingKey));\r\n  if (!setting) return <>Bad Setting Key</>;\r\n\r\n  switch (typeof setting.value) {\r\n    case \"boolean\":\r\n      return (\r\n        <Segment inverted>\r\n          <Grid columns={2} verticalAlign={\"middle\"}>\r\n            <Grid.Row>\r\n              <Grid.Column>\r\n                <p>{setting.label}</p>\r\n              </Grid.Column>\r\n              <Grid.Column>\r\n                <Checkbox\r\n                  toggle\r\n                  checked={setting.value}\r\n                  inline\r\n                  onClick={() =>\r\n                    setSetting({ ...setting, value: !setting.value })\r\n                  }\r\n                  style={{ backgroundColor: \"grey\", borderRadius: 10 }}\r\n                />\r\n              </Grid.Column>\r\n            </Grid.Row>\r\n          </Grid>\r\n        </Segment>\r\n      );\r\n    default:\r\n      return <>Bad Setting Type</>;\r\n  }\r\n};\r\n","import React from \"react\";\r\nimport { useSetRecoilState } from \"recoil\";\r\nimport { Button, Sidebar, Menu, Container } from \"semantic-ui-react\";\r\nimport { phrasesAtom } from \"../state/phraseState\";\r\nimport {\r\n  HIDE_ENGLISH,\r\n  HIDE_ROMAJI,\r\n  SKIP_IF_GOOD,\r\n} from \"../state/settingsState\";\r\nimport { SettingChanger } from \"./SettingChanger\";\r\n\r\ninterface SettingsSidebarProps {\r\n  isVisible: boolean;\r\n  setIsVisible: (isVisible: boolean) => void;\r\n}\r\nexport const SettingsSidebar = ({\r\n  isVisible,\r\n  setIsVisible,\r\n}: SettingsSidebarProps) => {\r\n  const setPhrases = useSetRecoilState(phrasesAtom);\r\n  return (\r\n    <Sidebar\r\n      as={Menu}\r\n      animation=\"overlay\"\r\n      inverted\r\n      onHide={() => setIsVisible(false)}\r\n      vertical\r\n      visible={isVisible}\r\n      direction={\"right\"}\r\n    >\r\n      <Menu.Item>\r\n        <SettingChanger settingKey={HIDE_ENGLISH} />\r\n      </Menu.Item>\r\n      <Menu.Item>\r\n        <SettingChanger settingKey={HIDE_ROMAJI} />\r\n      </Menu.Item>\r\n      <Menu.Item>\r\n        <SettingChanger settingKey={SKIP_IF_GOOD} />\r\n      </Menu.Item>\r\n      <Menu.Item>\r\n        <Container textAlign=\"center\">\r\n          <Button\r\n            inverted\r\n            onClick={() => {\r\n              setPhrases((phrases) =>\r\n                phrases.map((p) => ({ ...p, rating: 0 }))\r\n              );\r\n            }}\r\n          >\r\n            Reset Ratings\r\n          </Button>\r\n        </Container>\r\n      </Menu.Item>\r\n    </Sidebar>\r\n  );\r\n};\r\n","import React, { useState } from \"react\";\r\nimport { useRecoilState, useRecoilValue } from \"recoil\";\r\nimport \"semantic-ui-css/semantic.min.css\";\r\nimport {\r\n  Container,\r\n  Grid,\r\n  Header,\r\n  Icon,\r\n  Menu,\r\n  Segment,\r\n  Sidebar,\r\n  Button,\r\n} from \"semantic-ui-react\";\r\nimport { PhraseDisplay } from \"./components/PhraseDisplay\";\r\nimport { PhraseSummary } from \"./components/PhraseSummary\";\r\nimport { SettingsSidebar } from \"./components/SettingsSidebar\";\r\nimport { phraseIndexAtom, phrasesAtom } from \"./state/phraseState\";\r\nimport { Phrase } from \"./types\";\r\n\r\nfunction App() {\r\n  const [isSidebarVisible, setIsSidebarVisible] = useState(false);\r\n  const [isSettingsVisible, setIsSettingsVisible] = useState(false);\r\n  const phrases = useRecoilValue(phrasesAtom);\r\n  const [selectedPhraseIndex, setSelectedPhraseIndex] =\r\n    useRecoilState(phraseIndexAtom);\r\n  return (\r\n    <Grid columns={1}>\r\n      <Grid.Column style={{ paddingBottom: 0, backgroundColor: \"#efefef\" }}>\r\n        <Sidebar.Pushable>\r\n          <Sidebar\r\n            as={Menu}\r\n            animation=\"overlay\"\r\n            icon=\"labeled\"\r\n            inverted\r\n            onHide={() => setIsSidebarVisible(false)}\r\n            vertical\r\n            visible={isSidebarVisible}\r\n            width=\"thin\"\r\n          >\r\n            {phrases.map((phrase: Phrase, i: number) => (\r\n              <Menu.Item\r\n                key={i}\r\n                as=\"a\"\r\n                onClick={() => {\r\n                  setSelectedPhraseIndex(i);\r\n                }}\r\n                style={{\r\n                  opacity:\r\n                    selectedPhraseIndex !== i && phrase.rating >= 3 ? 0.5 : 1,\r\n                }}\r\n              >\r\n                <PhraseSummary\r\n                  phraseId={i}\r\n                  isSelected={selectedPhraseIndex === i}\r\n                />\r\n              </Menu.Item>\r\n            ))}\r\n          </Sidebar>\r\n          <SettingsSidebar\r\n            isVisible={isSettingsVisible}\r\n            setIsVisible={setIsSettingsVisible}\r\n          />\r\n          <Sidebar.Pusher\r\n            style={{\r\n              display: \"flex\",\r\n              flexDirection: \"column\",\r\n              justifyContent: \"space-between\",\r\n              minHeight: \"100vh\",\r\n            }}\r\n            dimmed={isSidebarVisible || isSettingsVisible}\r\n          >\r\n            <Container style={{ marginTop: 20 }}>\r\n              <Grid textAlign=\"center\" verticalAlign=\"middle\">\r\n                <Grid.Row columns={3}>\r\n                  <Grid.Column textAlign=\"left\">\r\n                    <Button\r\n                      icon={<Icon name=\"sidebar\" />}\r\n                      onClick={() => setIsSidebarVisible(true)}\r\n                      style={{}}\r\n                    />\r\n                  </Grid.Column>\r\n                  <Grid.Column>\r\n                    <Header\r\n                      textAlign={\"center\"}\r\n                      size={\"huge\"}\r\n                      style={{ fontSize: \"3em\" }}\r\n                    >\r\n                      imi\r\n                    </Header>\r\n                  </Grid.Column>\r\n                  <Grid.Column textAlign=\"right\">\r\n                    <Button\r\n                      icon={<Icon name=\"settings\" />}\r\n                      onClick={() => setIsSettingsVisible(true)}\r\n                      style={{}}\r\n                    />\r\n                  </Grid.Column>\r\n                </Grid.Row>\r\n              </Grid>\r\n              <PhraseDisplay />\r\n            </Container>\r\n            <Segment\r\n              inverted\r\n              style={{ width: \"100%\", marginBottom: 0, borderRadius: 0 }}\r\n            >\r\n              <div>\r\n                <h5 style={{ textAlign: \"center\" }}>\r\n                  This site uses an API provided by{\" \"}\r\n                  <a href={\"https://www.deepl.com/\"}>https://www.deepl.com/</a>\r\n                </h5>\r\n                <h5 style={{ textAlign: \"center\" }}>\r\n                  Have a suggestion? Open an issue on my&nbsp;\r\n                  <a href={\"https://github.com/connordear/imi\"}>\r\n                    GitHub project.\r\n                  </a>\r\n                </h5>\r\n              </div>\r\n            </Segment>\r\n          </Sidebar.Pusher>\r\n        </Sidebar.Pushable>\r\n      </Grid.Column>\r\n    </Grid>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport { QueryClient, QueryClientProvider } from \"react-query\";\r\nimport { RecoilRoot } from \"recoil\";\r\nconst queryClient = new QueryClient();\r\n\r\nReactDOM.render(\r\n  <RecoilRoot>\r\n    <React.StrictMode>\r\n      <QueryClientProvider client={queryClient}>\r\n        <App />\r\n      </QueryClientProvider>\r\n    </React.StrictMode>\r\n  </RecoilRoot>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}